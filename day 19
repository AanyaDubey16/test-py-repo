import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'

// Single-file React component for a simple social media app
// - User profiles
// - Create posts
// - Comment system
// - Like system
// - LocalStorage persistence for demo

export default function SocialApp() {
  // --- Profiles ---
  const [users, setUsers] = useState(() => {
    const saved = localStorage.getItem('sm_users')
    if (saved) return JSON.parse(saved)
    return [
      { id: 'u1', name: 'Aanya Dubey', bio: 'Curious college student', avatarColor: 'bg-purple-500' },
      { id: 'u2', name: 'Ritika Sharma', bio: 'Loves art & coffee', avatarColor: 'bg-green-500' },
      { id: 'u3', name: 'Kunal Bhaiya', bio: 'Software tinkerer', avatarColor: 'bg-blue-500' },
    ]
  })

  // active user simulates logged in account
  const [activeUserId, setActiveUserId] = useState(() => localStorage.getItem('sm_active') || 'u1')

  // --- Posts ---
  const [posts, setPosts] = useState(() => {
    const saved = localStorage.getItem('sm_posts')
    if (saved) return JSON.parse(saved)
    return [
      {
        id: 'p1',
        userId: 'u2',
        text: 'Excited to share a new drawing today ‚ú®',
        createdAt: Date.now() - 1000 * 60 * 60 * 24,
        likes: ['u1'],
        comments: [
          { id: 'c1', userId: 'u1', text: 'Wow that looks great!', createdAt: Date.now() - 1000 * 60 * 60 * 23 },
        ],
      },
    ]
  })

  // New post form
  const [draft, setDraft] = useState('')

  // Persist data
  useEffect(() => localStorage.setItem('sm_users', JSON.stringify(users)), [users])
  useEffect(() => localStorage.setItem('sm_posts', JSON.stringify(posts)), [posts])
  useEffect(() => localStorage.setItem('sm_active', activeUserId), [activeUserId])

  // Helpers
  const findUser = (id) => users.find((u) => u.id === id) || { name: 'Unknown', avatarColor: 'bg-gray-400' }

  // Create post
  function createPost(e) {
    e.preventDefault()
    if (!draft.trim()) return
    const newPost = {
      id: 'p' + Math.random().toString(36).slice(2, 9),
      userId: activeUserId,
      text: draft.trim(),
      createdAt: Date.now(),
      likes: [],
      comments: [],
    }
    setPosts([newPost, ...posts])
    setDraft('')
  }

  // Toggle like
  function toggleLike(postId) {
    setPosts((prev) =>
      prev.map((p) => {
        if (p.id !== postId) return p
        const liked = p.likes.includes(activeUserId)
        return { ...p, likes: liked ? p.likes.filter((id) => id !== activeUserId) : [...p.likes, activeUserId] }
      })
    )
  }

  // Add comment
  function addComment(postId, text) {
    if (!text.trim()) return
    const newComment = { id: 'c' + Math.random().toString(36).slice(2, 9), userId: activeUserId, text: text.trim(), createdAt: Date.now() }
    setPosts((prev) => prev.map((p) => (p.id === postId ? { ...p, comments: [...p.comments, newComment] } : p)))
  }

  // Edit profile (simple name & bio)
  function updateProfile(id, data) {
    setUsers((prev) => prev.map((u) => (u.id === id ? { ...u, ...data } : u)))
  }

  // Delete post
  function deletePost(postId) {
    setPosts((prev) => prev.filter((p) => p.id !== postId))
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left: Profile selector */}
        <aside className="col-span-1 bg-white rounded-2xl p-4 shadow-md">
          <h3 className="text-lg font-semibold mb-3">Accounts</h3>
          <div className="space-y-3">
            {users.map((u) => (
              <ProfileCard key={u.id} user={u} active={u.id === activeUserId} onSelect={() => setActiveUserId(u.id)} onEdit={(data) => updateProfile(u.id, data)} />
            ))}
          </div>

          <CreateProfile onCreate={(name, bio) => setUsers((prev) => [...prev, { id: 'u' + Math.random().toString(36).slice(2,7), name, bio, avatarColor: pickColor() }])} />
        </aside>

        {/* Center: Feed */}
        <main className="col-span-1 md:col-span-2">
          <div className="bg-white rounded-2xl p-4 shadow-md mb-6">
            <div className="flex gap-4 items-start">
              <Avatar user={findUser(activeUserId)} />
              <form className="flex-1" onSubmit={createPost}>
                <textarea value={draft} onChange={(e) => setDraft(e.target.value)} placeholder={`What's on your mind, ${findUser(activeUserId).name.split(' ')[0]}?`} className="w-full border rounded-xl p-3 resize-none h-24" />
                <div className="flex justify-end mt-3">
                  <button type="submit" className="px-4 py-2 rounded-xl bg-indigo-600 text-white font-medium">Post</button>
                </div>
              </form>
            </div>
          </div>

          <div className="space-y-4">
            {posts.length === 0 && <EmptyFeed />}
            {posts.map((post) => (
              <PostCard key={post.id} post={post} user={findUser(post.userId)} activeUserId={activeUserId} onLike={() => toggleLike(post.id)} onComment={(text) => addComment(post.id, text)} onDelete={() => deletePost(post.id)} />
            ))}
          </div>
        </main>
      </div>
    </div>
  )
}

// ---------- Utility & Subcomponents ----------

function Avatar({ user, size = 10 }) {
  const initials = (user.name || 'U').split(' ').map((s) => s[0]).slice(0,2).join('')
  return (
    <div className={`flex items-center justify-center ${user.avatarColor} text-white rounded-full`} style={{ width: size * 8, height: size * 8 }}>
      <span className="font-semibold">{initials}</span>
    </div>
  )
}

function ProfileCard({ user, active, onSelect, onEdit }) {
  const [editing, setEditing] = useState(false)
  const [name, setName] = useState(user.name)
  const [bio, setBio] = useState(user.bio)

  useEffect(() => {
    setName(user.name)
    setBio(user.bio)
  }, [user])

  return (
    <div className={`flex items-start gap-3 p-3 rounded-xl border ${active ? 'border-indigo-300 bg-indigo-50' : 'border-transparent'}`}>
      <Avatar user={user} size={10} />
      <div className="flex-1">
        {!editing ? (
          <>
            <div className="flex justify-between items-center">
              <div>
                <div className="font-semibold">{user.name}</div>
                <div className="text-sm text-gray-500">{user.bio}</div>
              </div>
              <div className="flex gap-2">
                <button onClick={onSelect} className="px-3 py-1 rounded-lg text-sm border">Switch</button>
                <button onClick={() => setEditing(true)} className="px-3 py-1 rounded-lg text-sm border">Edit</button>
              </div>
            </div>
          </>
        ) : (
          <form onSubmit={(e) => { e.preventDefault(); onEdit({ name, bio }); setEditing(false) }} className="space-y-2">
            <input value={name} onChange={(e) => setName(e.target.value)} className="w-full border rounded-md p-2" />
            <input value={bio} onChange={(e) => setBio(e.target.value)} className="w-full border rounded-md p-2" />
            <div className="flex gap-2 justify-end">
              <button type="button" onClick={() => setEditing(false)} className="px-3 py-1 rounded-lg border">Cancel</button>
              <button type="submit" className="px-3 py-1 rounded-lg bg-indigo-600 text-white">Save</button>
            </div>
          </form>
        )}
      </div>
    </div>
  )
}

function CreateProfile({ onCreate }) {
  const [open, setOpen] = useState(false)
  const [name, setName] = useState('')
  const [bio, setBio] = useState('')

  function submit(e) {
    e.preventDefault()
    if (!name.trim()) return
    onCreate(name.trim(), bio.trim())
    setName('')
    setBio('')
    setOpen(false)
  }

  return (
    <div className="mt-4">
      {!open ? (
        <button onClick={() => setOpen(true)} className="w-full px-3 py-2 rounded-xl border">+ Add account</button>
      ) : (
        <form onSubmit={submit} className="space-y-2">
          <input value={name} onChange={(e) => setName(e.target.value)} placeholder="Full name" className="w-full border rounded-md p-2" />
          <input value={bio} onChange={(e) => setBio(e.target.value)} placeholder="Short bio" className="w-full border rounded-md p-2" />
          <div className="flex gap-2">
            <button type="button" onClick={() => setOpen(false)} className="px-3 py-2 rounded-xl border">Cancel</button>
            <button type="submit" className="px-3 py-2 rounded-xl bg-indigo-600 text-white">Create</button>
          </div>
        </form>
      )}
    </div>
  )
}

function PostCard({ post, user, activeUserId, onLike, onComment, onDelete }) {
  const [commentText, setCommentText] = useState('')

  return (
    <motion.article initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} className="bg-white rounded-2xl p-4 shadow-md">
      <div className="flex gap-3">
        <Avatar user={user} />
        <div className="flex-1">
          <div className="flex justify-between items-start">
            <div>
              <div className="font-semibold">{user.name}</div>
              <div className="text-xs text-gray-400">{timeAgo(post.createdAt)}</div>
            </div>
            <div className="text-sm text-gray-500">
              {post.userId === activeUserId && (
                <button onClick={onDelete} className="px-2 py-1 border rounded-lg">Delete</button>
              )}
            </div>
          </div>

          <p className="mt-3 whitespace-pre-wrap">{post.text}</p>

          <div className="mt-4 flex gap-3 items-center">
            <button onClick={onLike} className={`px-3 py-1 rounded-full border ${post.likes.includes(activeUserId) ? 'bg-pink-50 border-pink-200' : ''}`}>
              ‚ù§Ô∏è {post.likes.length}
            </button>
            <div className="text-sm text-gray-500">üí¨ {post.comments.length}</div>
          </div>

          <div className="mt-3 border-t pt-3 space-y-3">
            <div className="space-y-2">
              {post.comments.map((c) => (
                <Comment key={c.id} comment={c} authorName={userNameForComment(c.userId)} />
              ))}
            </div>

            <form onSubmit={(e) => { e.preventDefault(); onComment(commentText); setCommentText('') }} className="flex gap-2 items-center">
              <input value={commentText} onChange={(e) => setCommentText(e.target.value)} placeholder="Write a comment..." className="flex-1 border rounded-xl p-2" />
              <button type="submit" className="px-3 py-1 rounded-xl bg-indigo-600 text-white">Comment</button>
            </form>
          </div>
        </div>
      </div>
    </motion.article>
  )
}

function Comment({ comment, authorName }) {
  return (
    <div className="flex gap-3 items-start">
      <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-xs font-semibold">{authorName.split(' ').map(s=>s[0]).slice(0,2).join('')}</div>
      <div className="bg-gray-100 rounded-xl p-2 flex-1">
        <div className="text-sm font-medium">{authorName}</div>
        <div className="text-sm text-gray-700">{comment.text}</div>
        <div className="text-xs text-gray-400 mt-1">{timeAgo(comment.createdAt)}</div>
      </div>
    </div>
  )
}

function EmptyFeed() {
  return (
    <div className="bg-white rounded-2xl p-8 text-center text-gray-500 shadow-md">
      Your feed is quiet. Create your first post to get things rolling!
    </div>
  )
}

// --- small helpers ---
function timeAgo(ts) {
  const diff = Math.floor((Date.now() - ts) / 1000)
  if (diff < 60) return `${diff}s ago`
  if (diff < 3600) return `${Math.floor(diff / 60)}m ago`
  if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`
  return `${Math.floor(diff / 86400)}d ago`
}

function pickColor() {
  const colors = ['bg-red-400','bg-yellow-400','bg-green-400','bg-blue-400','bg-indigo-400','bg-purple-400']
  return colors[Math.floor(Math.random() * colors.length)]
}

// Find name for comment author - naive lookup using localStorage snapshot
function userNameForComment(userId) {
  try {
    const users = JSON.parse(localStorage.getItem('sm_users') || '[]')
    const u = users.find((x) => x.id === userId)
    return u ? u.name : 'Someone'
  } catch (e) {
    return 'Someone'
  }
}
