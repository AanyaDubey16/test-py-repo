import React, { useEffect, useState, useRef } from 'react'
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet'
import 'leaflet/dist/leaflet.css'
import L from 'leaflet'

// NOTE: this single-file React component demonstrates:
// - Geolocation (navigator.geolocation)
// - OpenWeatherMap API integration (current + hourly/daily forecasts)
// - Interactive map with react-leaflet and clickable markers
// - Search by city (OpenWeatherMap Geocoding)
// To run in a real project: install react, react-dom, react-leaflet, leaflet and provide an OPENWEATHER_API_KEY.

// -- IMPORTANT: Replace with your OpenWeatherMap API key --
const OPENWEATHER_API_KEY = process.env.REACT_APP_OPENWEATHER_KEY || '<YOUR_OPENWEATHER_KEY>'

// Simple Leaflet icon fix for default marker images
delete L.Icon.Default.prototype._getIconUrl
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
})

export default function WeatherApp() {
  const [coords, setCoords] = useState(() => {
    const saved = localStorage.getItem('wa_coords')
    return saved ? JSON.parse(saved) : { lat: 20.5937, lon: 78.9629 } // India center fallback
  })
  const [loadingLocation, setLoadingLocation] = useState(false)
  const [weather, setWeather] = useState(null)
  const [error, setError] = useState(null)
  const [query, setQuery] = useState('')

  useEffect(() => {
    localStorage.setItem('wa_coords', JSON.stringify(coords))
  }, [coords])

  useEffect(() => {
    if (OPENWEATHER_API_KEY && coords) fetchWeather(coords.lat, coords.lon)
  }, [coords])

  async function fetchWeather(lat, lon) {
    setError(null)
    setWeather(null)
    try {
      // Using One Call (3.0) style: adjust endpoint if you have a different plan or API version
      const res = await fetch(`https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely&appid=${OPENWEATHER_API_KEY}`)
      if (!res.ok) throw new Error('Weather API error')
      const data = await res.json()
      setWeather(data)
    } catch (e) {
      console.error(e)
      setError(e.message)
    }
  }

  function locateMe() {
    if (!navigator.geolocation) return setError('Geolocation not supported')
    setLoadingLocation(true)
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        setCoords({ lat: pos.coords.latitude, lon: pos.coords.longitude })
        setLoadingLocation(false)
      },
      (err) => {
        setError(err.message)
        setLoadingLocation(false)
      },
      { enableHighAccuracy: true, timeout: 10000 }
    )
  }

  async function searchCity(e) {
    e.preventDefault()
    if (!query.trim()) return
    try {
      // OpenWeatherMap Geocoding API
      const q = encodeURIComponent(query.trim())
      const res = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${q}&limit=5&appid=${OPENWEATHER_API_KEY}`)
      if (!res.ok) throw new Error('Geocoding error')
      const places = await res.json()
      if (!places || places.length === 0) return setError('No results')
      setCoords({ lat: places[0].lat, lon: places[0].lon })
      setQuery('')
    } catch (e) {
      console.error(e)
      setError(e.message)
    }
  }

  return (
    <div className="min-h-screen bg-slate-50 p-6 font-sans">
      <div className="max-w-5xl mx-auto grid md:grid-cols-3 gap-6">
        <aside className="md:col-span-1 bg-white p-4 rounded-xl shadow-sm">
          <h2 className="text-xl font-semibold mb-3">Weather Explorer</h2>

          <form onSubmit={searchCity} className="flex gap-2 mb-4">
            <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Search city (eg: Mumbai)" className="flex-1 p-2 border rounded" />
            <button className="px-3 py-2 bg-indigo-600 text-white rounded">Search</button>
          </form>

          <div className="space-y-2">
            <button onClick={locateMe} className="w-full px-3 py-2 border rounded">{loadingLocation ? 'Locating...' : 'Use my location'}</button>
            <button onClick={() => { setCoords({ lat: 20.5937, lon: 78.9629 }); setError(null) }} className="w-full px-3 py-2 border rounded">Reset to India</button>
          </div>

          <div className="mt-4">
            {error && <div className="text-red-600">Error: {error}</div>}
            {weather ? (
              <WeatherSummary weather={weather} coords={coords} />
            ) : (
              <div className="text-gray-500 mt-3">No weather loaded yet. Search or use location.</div>
            )}
          </div>
        </aside>

        <main className="md:col-span-2 bg-white p-4 rounded-xl shadow-sm">
          <div className="h-96 rounded overflow-hidden mb-4">
            <MapContainer center={[coords.lat, coords.lon]} zoom={8} style={{ height: '100%', width: '100%' }}>
              <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
              <ClickableMarker coords={coords} setCoords={setCoords} />
              <Marker position={[coords.lat, coords.lon]}>
                <Popup>
                  {weather ? (
                    <div>
                      <div className="font-semibold">{Math.round(weather.current.temp)}°C</div>
                      <div className="text-sm">{weather.current.weather?.[0]?.description}</div>
                    </div>
                  ) : (
                    <div>Loading...</div>
                  )}
                </Popup>
              </Marker>
            </MapContainer>
          </div>

          <div>
            {weather ? (
              <div className="space-y-4">
                <ForecastPanels weather={weather} />
              </div>
            ) : (
              <div className="text-gray-500">Weather & forecast will show here after selecting a location.</div>
            )}
          </div>
        </main>
      </div>
    </div>
  )
}

function ClickableMarker({ coords, setCoords }) {
  // allow clicking map to move marker and fetch weather
  useMapEvents({
    click(e) {
      setCoords({ lat: e.latlng.lat, lon: e.latlng.lng })
    },
  })
  return null
}

function WeatherSummary({ weather, coords }) {
  return (
    <div>
      <div className="text-sm text-gray-600">Lat {coords.lat.toFixed(3)}, Lon {coords.lon.toFixed(3)}</div>
      <div className="mt-2">
        <div className="text-3xl font-bold">{Math.round(weather.current.temp)}°C</div>
        <div className="text-sm text-gray-600">Feels like {Math.round(weather.current.feels_like)}°C</div>
        <div className="mt-2 text-sm">{weather.current.weather?.[0]?.main} — {weather.current.weather?.[0]?.description}</div>
      </div>
    </div>
  )
}

function ForecastPanels({ weather }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <section className="p-4 border rounded">
        <h3 className="font-semibold mb-2">Hourly (next 12 hrs)</h3>
        <div className="flex gap-3 overflow-x-auto py-2">
          {weather.hourly.slice(0, 12).map((h, i) => (
            <div key={i} className="min-w-[88px] bg-slate-50 p-2 rounded text-center">
              <div className="text-sm">{new Date(h.dt * 1000).toLocaleTimeString()}</div>
              <div className="font-semibold">{Math.round(h.temp)}°C</div>
              <div className="text-xs">{h.weather?.[0]?.main}</div>
            </div>
          ))}
        </div>
      </section>

      <section className="p-4 border rounded">
        <h3 className="font-semibold mb-2">Daily (next 7 days)</h3>
        <div className="space-y-2">
          {weather.daily.slice(0, 7).map((d, i) => (
            <div key={i} className="flex justify-between items-center p-2 bg-slate-50 rounded">
              <div>
                <div className="font-medium">{new Date(d.dt * 1000).toLocaleDateString()}</div>
                <div className="text-xs">{d.weather?.[0]?.description}</div>
              </div>
              <div className="text-right">
                <div className="font-semibold">{Math.round(d.temp.day)}°C</div>
                <div className="text-xs">High {Math.round(d.temp.max)} · Low {Math.round(d.temp.min)}</div>
              </div>
            </div>
          ))}
        </div>
      </section>
    </div>
  )
}

